import { Bytes } from './types.js';
export declare function bin2Num(bin: number[] | string): number;
export declare function num2Bin(num: number | bigint): number[];
export declare function strToBytes(str: string): Uint8Array;
export declare function hexToBytes(str: string): Uint8Array;
export declare function numToBytes(num: number): Uint8Array;
export declare function binaryToBytes(binary: string | number[]): Uint8Array;
export declare function bytesToBinary(bytes: Uint8Array): number[];
export declare function bigToBytes(big: bigint): Uint8Array;
export declare function bytesToStr(bytes: Uint8Array): string;
export declare function bytesToHex(bytes: Uint8Array): string;
export declare function bytesToNum(bytes: Uint8Array): number;
export declare function bytesToBig(bytes: Uint8Array): bigint;
export declare function buffer(value: any, bytes?: boolean): Uint8Array;
export declare function normalize(bytes: Bytes): Uint8Array;
export declare function hexify(bytes: Bytes): string;
export declare function serialize(data: any): Uint8Array;
export declare function revive<T = Object>(data: any): string | T;
export declare const Hex: {
    encode: (x: Uint8Array) => string;
    decode: (x: string) => Uint8Array;
    normalize: (x: Bytes) => Uint8Array;
    serialize: (x: Bytes) => string;
};
export declare const Txt: {
    encode: (x: Uint8Array) => string;
    decode: (x: string) => Uint8Array;
    serialzie: (x: any) => Uint8Array;
    revive: (x: string) => string | Object;
};
//# sourceMappingURL=convert.d.ts.map