{"version":3,"file":"bundle.min.js","sources":["../node_modules/@noble/hashes/esm/_assert.js","../node_modules/@noble/hashes/esm/crypto.js","../node_modules/@noble/hashes/esm/utils.js","../node_modules/@noble/hashes/esm/_sha2.js","../node_modules/@noble/hashes/esm/sha256.js","../node_modules/@noble/curves/esm/abstract/utils.js","../node_modules/@noble/curves/esm/abstract/modular.js","../node_modules/@noble/curves/esm/abstract/curve.js","../node_modules/@noble/curves/esm/abstract/weierstrass.js","../node_modules/@noble/hashes/esm/hmac.js","../node_modules/@noble/curves/esm/_shortw_utils.js","../node_modules/@noble/curves/esm/secp256k1.js","../node_modules/@noble/curves/esm/abstract/hash-to-curve.js","../node_modules/@noble/hashes/esm/_u64.js","../node_modules/@noble/hashes/esm/sha512.js","../node_modules/@noble/hashes/esm/ripemd160.js","../node_modules/@cmdcode/buff-utils/dist/module.mjs","../src/ecc.ts","../src/utils.ts","../src/signer.ts","../src/keypair.ts","../src/hash.ts"],"sourcesContent":["export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use `globalThis.crypto`, but node.js versions earlier than v19 don't\n// declare it in global scope. For node.js, package.json#exports field mapping\n// rewrites import from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef])) // 'deadbeef'\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef') // Uint8Array.from([0xde, 0xad, 0xbe, 0xef])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `globalThis.crypto` or node.js crypto module.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_sha2.js.map","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a) => a instanceof Uint8Array;\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nexport function bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// Caching slows it down 2-3x\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    if (hex.length % 2)\n        throw new Error('hex string is invalid: unpadded ' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// Big Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport const numberToBytesBE = (n, len) => hexToBytes(n.toString(16).padStart(len * 2, '0'));\nexport const numberToBytesLE = (n, len) => numberToBytesBE(n, len).reverse();\n// Returns variable number bytes (minimal bigint encoding?)\nexport const numberToVarBytesBE = (n) => hexToBytes(numberToHexUnpadded(n));\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (u8a(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n// Copies several Uint8Arrays into one.\nexport function concatBytes(...arrs) {\n    const r = new Uint8Array(arrs.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrs.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nexport function equalBytes(b1, b2) {\n    // We don't care about timing attacks here\n    if (b1.length !== b2.length)\n        return false;\n    for (let i = 0; i < b1.length; i++)\n        if (b1[i] !== b2[i])\n            return false;\n    return true;\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\n// Bit operations\n// Amount of bits inside bigint (Same as n.toString(2).length)\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > 0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n// Gets single bit at position. NOTE: first bit position is 0 (same as arrays)\n// Same as !!+Array.from(n.toString(2)).reverse()[pos]\nexport const bitGet = (n, pos) => (n >> BigInt(pos)) & 1n;\n// Sets single bit at position\nexport const bitSet = (n, pos, value) => n | ((value ? _1n : _0n) << BigInt(pos));\n// Return mask for N bits (Same as BigInt(`0b${Array(i).fill('1').join('')}`))\n// Not using ** operator with bigints for old engines.\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently exponentiate num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * powMod(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Eucledian GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n// Tonelli-Shanks algorithm\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n// 0 is non-invertible: non-batched version will throw on 0\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a galois field over prime. Non-primes are not supported for now.\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\n * Major performance gains:\n * a) non-normalized operations like mulN instead of mul\n * b) `Object.freeze`\n * c) Same object shape: never add or remove keys\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being neglible.\n * Needs at least 40 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * @param hash hash output from SHA3 or a similar function\n * @returns valid private scalar\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nconst DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        if (res[0] === 0x00 && res[1] <= 0x7f)\n            throw new E('Invalid signature integer: trailing length');\n        // ^ Weird condition: not about length, but about first bytes of number.\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!(data instanceof Uint8Array))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        const slice = (s) => (Number.parseInt(s[0], 16) >= 8 ? '00' + s : s); // slice DER\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((c, point, isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (key instanceof Uint8Array)\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            // Zero is valid point too!\n            if (this.is0()) {\n                if (CURVE.allowInfinityPoint)\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size (nBitLength+64)\n         * as per FIPS 186 B.4.1 with modulo bias being neglible.\n         */\n        randomPrivateKey: () => {\n            const rand = CURVE.randomBytes(Fp.BYTES + 8);\n            const num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\n            return ut.numberToBytesBE(num, CURVE.nByteLength);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = item instanceof Uint8Array;\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash (not message: you need to hash it by yourself).\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param opts `lowS, extraEntropy, prehash`\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const drbg = ut.createHmacDrbg(CURVE.hash.outputLen, CURVE.nByteLength, CURVE.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || sg instanceof Uint8Array) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n// Implementation of the Shallue and van de Woestijne method for any Weierstrass curve\n// TODO: check if there is a way to merge this with uvRatio in Edwards && move to modular?\n// b = True and y = sqrt(u / v) if (u / v) is square in F, and\n// b = False and y = sqrt(Z * (u / v)) otherwise.\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    const c2 = (q - _1n) / _2n ** c1; // 2. c2 = (q - 1) / (2^c1)        # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n ** c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n ** (c1 - _1n); // 5. c5 = 2^(c1 - 1)              # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > 1; i--) {\n            let tv5 = _2n ** (i - _2n); // 18.    tv5 = i - 2;    19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n// From draft-irtf-cfrg-hash-to-curve-16\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport * as htf from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp,\n    n: secp256k1N,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true,\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = {\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n};\nconst isoMap = htf.isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j))));\nconst mapSWU = mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n});\nexport const { hashToCurve, encodeToCurve } = htf.createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n});\n//# sourceMappingURL=secp256k1.js.map","import { mod } from './modular.js';\nimport { bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from './utils.js';\nfunction validateDST(dst) {\n    if (dst instanceof Uint8Array)\n        return dst;\n    if (typeof dst === 'string')\n        return utf8ToBytes(dst);\n    throw new Error('DST must be Uint8Array or string');\n}\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction isBytes(item) {\n    if (!(item instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n}\nfunction isNum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.4.1\nexport function expand_message_xmd(msg, DST, lenInBytes, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n    if (DST.length > 255)\n        DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H(concatBytes(...args));\n    }\n    const pseudo_random_bytes = concatBytes(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\nexport function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.3\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg, count, options) {\n    validateObject(options, {\n        DST: 'string',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    isBytes(msg);\n    isNum(count);\n    const DST = validateDST(_DST);\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === undefined) {\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\", \"xof\" or undefined');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = mod(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nexport function isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nexport function createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve\n        // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\n//# sourceMappingURL=hash-to-curve.js.map","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nexport class RIPEMD160 extends SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = wrapConstructor(() => new RIPEMD160());\n//# sourceMappingURL=ripemd160.js.map","function joinArray(arr) {\n    let i, idx = 0;\n    const size = arr.reduce((prev, curr) => prev + curr.length, 0);\n    const buff = new Uint8Array(size);\n    for (const bytes of arr) {\n        for (i = 0; i < bytes.length; idx++, i++) {\n            buff[idx] = bytes[i];\n        }\n    }\n    return buff;\n}\n\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nvar assert$1 = assert;\n\nconst crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nconst isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nArray.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n// For runtime check if class implements interface\nlet Hash$1 = class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n};\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `globalThis.crypto` or node.js crypto module.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends Hash$1 {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert$1.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert$1.exists(this);\n        assert$1.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nconst sha256$1 = wrapConstructor(() => new SHA256());\nwrapConstructor(() => new SHA224());\n\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nvar u64$1 = u64;\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64$1.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nclass SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64$1.rotrSH(W15h, W15l, 1) ^ u64$1.rotrSH(W15h, W15l, 8) ^ u64$1.shrSH(W15h, W15l, 7);\n            const s0l = u64$1.rotrSL(W15h, W15l, 1) ^ u64$1.rotrSL(W15h, W15l, 8) ^ u64$1.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64$1.rotrSH(W2h, W2l, 19) ^ u64$1.rotrBH(W2h, W2l, 61) ^ u64$1.shrSH(W2h, W2l, 6);\n            const s1l = u64$1.rotrSL(W2h, W2l, 19) ^ u64$1.rotrBL(W2h, W2l, 61) ^ u64$1.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64$1.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64$1.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64$1.rotrSH(Eh, El, 14) ^ u64$1.rotrSH(Eh, El, 18) ^ u64$1.rotrBH(Eh, El, 41);\n            const sigma1l = u64$1.rotrSL(Eh, El, 14) ^ u64$1.rotrSL(Eh, El, 18) ^ u64$1.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64$1.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64$1.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64$1.rotrSH(Ah, Al, 28) ^ u64$1.rotrBH(Ah, Al, 34) ^ u64$1.rotrBH(Ah, Al, 39);\n            const sigma0l = u64$1.rotrSL(Ah, Al, 28) ^ u64$1.rotrBL(Ah, Al, 34) ^ u64$1.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64$1.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64$1.add3L(T1l, sigma0l, MAJl);\n            Ah = u64$1.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64$1.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64$1.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64$1.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64$1.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64$1.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64$1.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64$1.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64$1.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nconst sha512$1 = wrapConstructor(() => new SHA512());\nwrapConstructor(() => new SHA512_224());\nwrapConstructor(() => new SHA512_256());\nwrapConstructor(() => new SHA384());\n\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nclass RIPEMD160 extends SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nconst ripemd160 = wrapConstructor(() => new RIPEMD160());\n\n// HMAC (RFC 2104)\nclass HMAC extends Hash$1 {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert$1.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert$1.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert$1.exists(this);\n        assert$1.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n\nconst ec$2 = new TextEncoder();\nconst dc = new TextDecoder();\nfunction strToBytes(str) {\n    return ec$2.encode(str);\n}\nfunction hexToBytes(str) {\n    const bytes = new Uint8Array(str.length / 2);\n    let i, idx = 0;\n    if (str.match(/[^a-fA-f0-9]/) !== null) {\n        throw new TypeError('Invalid hex string: ' + str);\n    }\n    if (str.length % 2 > 0) {\n        throw new Error(`Hex string length is uneven: ${str.length}`);\n    }\n    for (i = 0; i < str.length; i += 2) {\n        bytes[idx] = parseInt(str.slice(i, i + 2), 16);\n        idx += 1;\n    }\n    return bytes;\n}\nfunction numToBytes(num) {\n    if (num === 0)\n        return Uint8Array.of(0x00);\n    const bytes = [];\n    while (num > 0) {\n        const byte = num & 0xff;\n        bytes.push(byte);\n        num = (num - byte) / 256;\n    }\n    return new Uint8Array(bytes);\n}\nfunction binaryToBytes(binary) {\n    if (typeof binary === 'string') {\n        binary = binary.split('').map(Number);\n    }\n    else if (!Array.isArray(binary)) {\n        throw new Error('Invalid input type: expected a string or an array of numbers.');\n    }\n    if (binary.length % 8 !== 0) {\n        throw new Error(`Binary array is invalid length: ${binary.length}`);\n    }\n    const bytes = new Uint8Array(binary.length / 8);\n    for (let i = 0, ct = 0; i < binary.length; i += 8, ct++) {\n        let byte = 0;\n        for (let j = 0; j < 8; j++) {\n            byte |= (binary[i + j] << (7 - j));\n        }\n        bytes[ct] = byte;\n    }\n    return bytes;\n}\nfunction bytesToBinary(bytes) {\n    const bin = new Array(bytes.length * 8);\n    let count = 0;\n    for (const num of bytes) {\n        if (num > 255) {\n            throw new Error(`Invalid byte value: ${num}. Byte values must be between 0 and 255.`);\n        }\n        for (let i = 7; i >= 0; i--, count++) {\n            bin[count] = (num >> i) & 1;\n        }\n    }\n    return bin;\n}\nfunction bigToBytes(big) {\n    if (big === 0n)\n        return Uint8Array.of(0x00);\n    const bytes = [];\n    while (big > 0n) {\n        const byte = big & 0xffn;\n        bytes.push(Number(byte));\n        big = (big - byte) / 256n;\n    }\n    return new Uint8Array(bytes);\n}\nfunction bytesToStr(bytes) {\n    return dc.decode(bytes);\n}\nfunction bytesToHex(bytes) {\n    const chars = new Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        chars.push(bytes[i].toString(16).padStart(2, '0'));\n    }\n    return chars.join('');\n}\nfunction bytesToNum(bytes) {\n    let num = 0, i;\n    for (i = bytes.length - 1; i >= 0; i--) {\n        num = (num * 256) + bytes[i];\n    }\n    return Number(num);\n}\nfunction bytesToBig(bytes) {\n    let num = 0n, i;\n    for (i = bytes.length - 1; i >= 0; i--) {\n        num = (num * 256n) + BigInt(bytes[i]);\n    }\n    return BigInt(num);\n}\nfunction buffer(value, bytes = true) {\n    if (value instanceof ArrayBuffer) {\n        return new Uint8Array(value);\n    }\n    if (value instanceof Uint8Array) {\n        return new Uint8Array(value);\n    }\n    switch (typeof value) {\n        case 'bigint':\n            return bigToBytes(value);\n        case 'boolean':\n            return Uint8Array.of(value ? 1 : 0);\n        case 'number':\n            return numToBytes(value);\n        case 'string':\n            return (bytes)\n                ? hexToBytes(value)\n                : ec$2.encode(value);\n        default:\n            throw TypeError('Unsupported format:' + String(typeof value));\n    }\n}\nfunction hexify(bytes) {\n    bytes = buffer(bytes, true);\n    return bytesToHex(bytes);\n}\nfunction serialize(data) {\n    if (typeof data === 'object') {\n        if (data instanceof Uint8Array) {\n            return data;\n        }\n        try {\n            return strToBytes(JSON.stringify(data));\n        }\n        catch {\n            throw TypeError('Object is not serializable.');\n        }\n    }\n    return buffer(data, false);\n}\nfunction revive(data) {\n    if (data instanceof Uint8Array) {\n        data = bytesToStr(data);\n    }\n    if (typeof data === 'string') {\n        try {\n            return JSON.parse(data);\n        }\n        catch {\n            return data;\n        }\n    }\n    return data;\n}\nconst Hex = {\n    encode: (x) => bytesToHex(x),\n    decode: (x) => hexToBytes(x),\n    normalize: (x) => buffer(x),\n    serialize: (x) => bytesToHex(buffer(x))\n};\nconst Txt = {\n    encode: (x) => bytesToStr(x),\n    decode: (x) => strToBytes(x),\n    serialzie: (x) => serialize(x),\n    revive: (x) => revive(x)\n};\n\nfunction sha256(msg) {\n    return sha256$1(buffer(msg));\n}\nfunction sha512(msg) {\n    return sha512$1(buffer(msg));\n}\nfunction ripe160(msg) {\n    return sha512$1(buffer(msg));\n}\nfunction hash256(msg) {\n    return sha256$1(sha256$1(buffer(msg)));\n}\nfunction hash160(msg) {\n    return ripemd160(sha256$1(buffer(msg)));\n}\nfunction hmac256(key, msg) {\n    return hmac(sha256$1, buffer(key), buffer(msg));\n}\nfunction hmac512(key, msg) {\n    return hmac(sha512$1, buffer(key), buffer(msg));\n}\nconst Hash = {\n    sha256,\n    sha512,\n    ripe160,\n    hash256,\n    hash160,\n    hmac256,\n    hmac512\n};\n\nconst ec$1 = new TextEncoder();\nconst ALPHABETS = [\n    {\n        name: 'base58',\n        charset: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n    }\n];\nfunction getAlphabet(name) {\n    for (const alpha of ALPHABETS) {\n        if (alpha.name === name) {\n            return alpha.charset;\n        }\n    }\n    throw TypeError('Charset does not exist: ' + name);\n}\nfunction encode$1(data, charset, padding = false) {\n    if (typeof data === 'string')\n        data = ec$1.encode(data);\n    const alphabet = getAlphabet(charset);\n    const len = alphabet.length;\n    const d = [];\n    let s = '', i, j = 0, c, n;\n    for (i = 0; i < data.length; i++) {\n        j = 0;\n        c = data[i];\n        s += (c > 0 || (s.length ^ i) > 0) ? '' : '1';\n        while (j in d || c > 0) {\n            n = d[j];\n            n = n > 0 ? n * 256 + c : c;\n            c = n / len | 0;\n            d[j] = n % len;\n            j++;\n        }\n    }\n    while (j-- > 0) {\n        s += alphabet[d[j]];\n    }\n    return (padding && s.length % 4 > 0)\n        ? s + '='.repeat(4 - s.length % 4)\n        : s;\n}\nfunction decode$1(encoded, charset) {\n    const alphabet = getAlphabet(charset);\n    const len = alphabet.length, d = [], b = [];\n    encoded = encoded.replace('=', '');\n    let i, j = 0, c, n;\n    for (i = 0; i < encoded.length; i++) {\n        j = 0;\n        c = alphabet.indexOf(encoded[i]);\n        if (c < 0) {\n            throw new Error(`Character range out of bounds: ${c}`);\n        }\n        if (!(c > 0 || (b.length ^ i) > 0))\n            b.push(0);\n        while (j in d || c > 0) {\n            n = d[j];\n            n = n > 0 ? n * len + c : c;\n            c = n >> 8;\n            d[j] = n % 256;\n            j++;\n        }\n    }\n    while (j-- > 0) {\n        b.push(d[j]);\n    }\n    return new Uint8Array(b);\n}\nfunction addChecksum(data) {\n    const sum = hash256(data);\n    return joinArray([data, sum.slice(0, 4)]);\n}\nfunction checkTheSum(data) {\n    const ret = data.slice(0, -4);\n    const chk = data.slice(-4);\n    const sum = hash256(ret).slice(0, 4);\n    if (sum.toString() !== chk.toString()) {\n        throw new Error('Invalid checksum!');\n    }\n    return ret;\n}\nconst BaseX = {\n    encode: encode$1,\n    decode: decode$1\n};\nconst Base58 = {\n    encode: (data) => BaseX.encode(data, 'base58'),\n    decode: (data) => BaseX.decode(data, 'base58')\n};\nconst Base58C = {\n    encode: (data) => {\n        const withSum = addChecksum(data);\n        return BaseX.encode(withSum, 'base58');\n    },\n    decode: (data) => {\n        const decoded = BaseX.decode(data, 'base58');\n        return checkTheSum(decoded);\n    }\n};\n\nconst CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\nconst GENERATOR = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nconst ENCODINGS = [\n    { version: 0, name: 'bech32', const: 1 },\n    { version: 1, name: 'bech32m', const: 0x2bc830a3 }\n];\nfunction polymod(values) {\n    let chk = 1;\n    for (let p = 0; p < values.length; ++p) {\n        const top = chk >> 25;\n        chk = (chk & 0x1ffffff) << 5 ^ values[p];\n        for (let i = 0; i < 5; ++i) {\n            if (((top >> i) & 1) !== 0) {\n                chk ^= GENERATOR[i];\n            }\n        }\n    }\n    return chk;\n}\nfunction hrpExpand(hrp) {\n    const ret = [];\n    let p;\n    for (p = 0; p < hrp.length; ++p) {\n        ret.push(hrp.charCodeAt(p) >> 5);\n    }\n    ret.push(0);\n    for (p = 0; p < hrp.length; ++p) {\n        ret.push(hrp.charCodeAt(p) & 31);\n    }\n    return ret;\n}\nfunction verifyChecksum(hrp, data, enc) {\n    const combined = hrpExpand(hrp).concat(data);\n    return polymod(combined) === enc.const;\n}\nfunction createChecksum(hrp, data, enc) {\n    const values = hrpExpand(hrp).concat(data).concat([0, 0, 0, 0, 0, 0]);\n    const mod = polymod(values) ^ enc.const;\n    const ret = [];\n    for (let p = 0; p < 6; ++p) {\n        ret.push((mod >> 5 * (5 - p)) & 31);\n    }\n    return ret;\n}\nfunction convertBits(data, fromBits, toBits, pad = true) {\n    const ret = [];\n    let acc = 0;\n    let bits = 0;\n    const maxVal = (1 << toBits) - 1;\n    const maxAcc = (1 << (fromBits + toBits - 1)) - 1;\n    for (const val of data) {\n        if (val < 0 || (val >> fromBits) > 0) {\n            throw new Error('Failed to perform base conversion. Invalid value: ' + String(val));\n        }\n        acc = ((acc << fromBits) | val) & maxAcc;\n        bits += fromBits;\n        while (bits >= toBits) {\n            bits -= toBits;\n            ret.push((acc >> bits) & maxVal);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            ret.push((acc << (toBits - bits)) & maxVal);\n        }\n    }\n    else if (bits >= fromBits || ((acc << (toBits - bits)) & maxVal) > 0) {\n        throw new Error('Failed to perform base conversion. Invalid Size!');\n    }\n    return ret;\n}\nfunction encode(hrp, data, enc) {\n    const combined = data.concat(createChecksum(hrp, data, enc));\n    let ret = hrp + '1';\n    for (let p = 0; p < combined.length; ++p) {\n        ret += CHARSET.charAt(combined[p]);\n    }\n    return ret;\n}\nfunction decode(bechstr) {\n    if (!checkBounds(bechstr)) {\n        throw new Error('Encoded string goes out of bounds!');\n    }\n    bechstr = bechstr.toLowerCase();\n    if (!checkSeparatorPos(bechstr)) {\n        throw new Error('Encoded string has invalid separator!');\n    }\n    const data = [];\n    const pos = bechstr.lastIndexOf('1');\n    const hrp = bechstr.substring(0, pos);\n    for (let p = pos + 1; p < bechstr.length; ++p) {\n        const d = CHARSET.indexOf(bechstr.charAt(p));\n        if (d === -1) {\n            throw new Error('Character idx out of bounds: ' + String(p));\n        }\n        data.push(d);\n    }\n    const enc = ENCODINGS.find(e => e.version === data[0]) ?? ENCODINGS[0];\n    if (!verifyChecksum(hrp, data, enc)) {\n        throw new Error('Checksum verification failed!');\n    }\n    return [hrp, data.slice(0, data.length - 6)];\n}\nfunction checkBounds(bechstr) {\n    let p;\n    let char;\n    let hasLower = false;\n    let hasUpper = false;\n    for (p = 0; p < bechstr.length; ++p) {\n        char = bechstr.charCodeAt(p);\n        if (char < 33 || char > 126) {\n            return false;\n        }\n        if (char >= 97 && char <= 122) {\n            hasLower = true;\n        }\n        if (char >= 65 && char <= 90) {\n            hasUpper = true;\n        }\n    }\n    if (hasLower && hasUpper)\n        return false;\n    return true;\n}\nfunction checkSeparatorPos(bechstr) {\n    const pos = bechstr.lastIndexOf('1');\n    return !(pos < 1 ||\n        pos + 7 > bechstr.length ||\n        bechstr.length > 90);\n}\nfunction b32encode(data, hrp = 'bc', version = 0) {\n    const dat = [version, ...convertBits([...data], 8, 5)];\n    const enc = ENCODINGS.find(e => e.version === version) ?? ENCODINGS[0];\n    const str = encode(hrp, dat, enc);\n    b32decode(str);\n    return str;\n}\nfunction b32decode(str) {\n    str = str.toLowerCase();\n    const hrp = str.split('1', 1)[0];\n    const [hrpgot, data] = decode(str);\n    const decoded = convertBits(data.slice(1), 5, 8, false);\n    const length = decoded.length;\n    switch (true) {\n        case (hrp !== hrpgot):\n            throw new Error('Returned hrp string is invalid.');\n        case (decoded === null || length < 2 || length > 40):\n            throw new Error('Decoded string is invalid or out of spec.');\n        case (data[0] > 16):\n            throw new Error('Returned version bit is out of range.');\n        default:\n            return Uint8Array.from(decoded);\n    }\n}\nfunction getVersion(str) {\n    str = str.toLowerCase();\n    const [_, data] = decode(str);\n    return data[0];\n}\nconst Bech32 = {\n    encode: b32encode,\n    decode: b32decode,\n    version: getVersion\n};\n\nconst BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst B64URL_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\nconst ec = new TextEncoder();\nfunction b64encode(input, urlSafe = false) {\n    if (typeof input === 'string')\n        input = ec.encode(input);\n    const map = urlSafe ? B64URL_MAP : BASE64_MAP;\n    let output = '';\n    let bits = 0;\n    let buffer = 0;\n    for (let i = 0; i < input.length; i++) {\n        buffer = (buffer << 8) | input[i];\n        bits += 8;\n        while (bits >= 6) {\n            bits -= 6;\n            output += map[(buffer >> bits) & 0x3f];\n        }\n    }\n    if (bits > 0) {\n        buffer <<= 6 - bits;\n        output += map[buffer & 0x3f];\n        while (bits < 6) {\n            output += urlSafe ? '' : '=';\n            bits += 2;\n        }\n    }\n    return output;\n}\nfunction b64decode(input, urlSafe = false) {\n    const map = (urlSafe || input.includes('-') || input.includes('_'))\n        ? B64URL_MAP.split('')\n        : BASE64_MAP.split('');\n    input = input.replace(/=+$/, '');\n    const chars = input.split('');\n    let bits = 0;\n    let value = 0;\n    const bytes = [];\n    for (let i = 0; i < chars.length; i++) {\n        const c = chars[i];\n        const index = map.indexOf(c);\n        if (index === -1) {\n            throw new Error('Invalid character: ' + c);\n        }\n        bits += 6;\n        value <<= 6;\n        value |= index;\n        if (bits >= 8) {\n            bits -= 8;\n            bytes.push((value >>> bits) & 0xff);\n        }\n    }\n    return new Uint8Array(bytes);\n}\nconst Base64 = {\n    encode: b64encode,\n    decode: b64decode\n};\nconst B64URL = {\n    encode: (data) => b64encode(data, true),\n    decode: (data) => b64decode(data, true)\n};\n\nclass Buff extends Uint8Array {\n    static { this.num = (number, size, endian = 'le') => {\n        const b = new Buff(numToBytes(number), size);\n        return (endian === 'le') ? b.reverse() : b;\n    }; }\n    static { this.big = (number, size, endian = 'le') => {\n        const b = new Buff(bigToBytes(number), size);\n        return (endian === 'le') ? b.reverse() : b;\n    }; }\n    static { this.bin = (data, size) => new Buff(binaryToBytes(data), size); }\n    static { this.any = (data, size) => new Buff(buffer(data, false), size); }\n    static { this.raw = (data, size) => new Buff(data, size); }\n    static { this.str = (data, size) => new Buff(strToBytes(data), size); }\n    static { this.hex = (data, size) => new Buff(hexToBytes(data), size); }\n    static { this.json = (data) => new Buff(strToBytes(JSON.stringify(data))); }\n    static { this.bytes = (data, size) => new Buff(buffer(data, true), size); }\n    static { this.base64 = (data) => new Buff(Base64.decode(data)); }\n    static { this.b64url = (data) => new Buff(B64URL.decode(data)); }\n    static { this.bech32 = (data) => new Buff(Bech32.decode(data)); }\n    static { this.b58chk = (data) => new Buff(Base58C.decode(data)); }\n    constructor(data, size) {\n        data = buffer(data, true);\n        if (typeof size === 'number') {\n            const tmp = new Uint8Array(size).fill(0);\n            tmp.set(new Uint8Array(data));\n            data = tmp.buffer;\n        }\n        super(data);\n        return this;\n    }\n    get arr() {\n        return [...this];\n    }\n    get num() {\n        return this.toNum();\n    }\n    get big() {\n        return this.toBig();\n    }\n    get str() {\n        return this.toStr();\n    }\n    get hex() {\n        return this.toHex();\n    }\n    get raw() {\n        return new Uint8Array(this);\n    }\n    get bits() {\n        return this.toBits();\n    }\n    get bin() {\n        return this.toBin();\n    }\n    get b58chk() {\n        return this.tob58chk();\n    }\n    get base64() {\n        return this.toBase64();\n    }\n    get b64url() {\n        return this.toB64url();\n    }\n    get digest() {\n        return this.toHash();\n    }\n    get id() {\n        return this.toHash().hex;\n    }\n    get stream() {\n        return new Stream(this);\n    }\n    toNum(endian = 'le') {\n        return (endian === 'le')\n            ? bytesToNum(this.reverse())\n            : bytesToNum(this);\n    }\n    toBig(endian = 'le') {\n        return (endian === 'le')\n            ? bytesToBig(this.reverse())\n            : bytesToBig(this);\n    }\n    toHash(type = 'sha256') {\n        switch (type) {\n            case 'sha256':\n                return new Buff(Hash.sha256(this));\n            case 'hash256':\n                return new Buff(Hash.hash256(this));\n            case 'ripe160':\n                return new Buff(Hash.ripe160(this));\n            case 'hash160':\n                return new Buff(Hash.hash160(this));\n            default:\n                throw new Error('Unrecognized format:' + String(type));\n        }\n    }\n    toHmac(key, type = 'hmac256') {\n        switch (type) {\n            case 'hmac256':\n                return new Buff(Hash.hmac256(key, this));\n            case 'hmac512':\n                return new Buff(Hash.hmac512(key, this));\n            default:\n                throw new Error('Unrecognized format:' + String(type));\n        }\n    }\n    toStr() { return bytesToStr(this); }\n    toHex() { return bytesToHex(this); }\n    toJson() { return JSON.parse(bytesToStr(this)); }\n    toBytes() { return new Uint8Array(this); }\n    toBits() { return bytesToBinary(this); }\n    toBin() { return bytesToBinary(this).join(''); }\n    tob58chk() { return Base58C.encode(this); }\n    toB64url() { return B64URL.encode(this); }\n    toBase64() { return Base64.encode(this); }\n    toBech32(hrp, version = 0) { return Bech32.encode(this, hrp, version); }\n    prepend(data) {\n        return Buff.join([Buff.bytes(data), this]);\n    }\n    append(data) {\n        return Buff.join([this, Buff.bytes(data)]);\n    }\n    slice(start, end) {\n        return new Buff(new Uint8Array(this).slice(start, end));\n    }\n    subarray(begin, end) {\n        return new Buff(new Uint8Array(this).subarray(begin, end));\n    }\n    reverse() {\n        return new Buff(new Uint8Array(this).reverse());\n    }\n    write(bytes, offset) {\n        this.set(bytes, offset);\n    }\n    prefixSize(endian) {\n        const size = Buff.varInt(this.length, endian);\n        return Buff.join([size, this]);\n    }\n    static from(data) {\n        return new Buff(Uint8Array.from(data));\n    }\n    static of(...args) {\n        return new Buff(Uint8Array.of(...args));\n    }\n    static join(arr) {\n        const data = arr.map(e => Buff.bytes(e));\n        return new Buff(joinArray(data));\n    }\n    static varInt(num, endian) {\n        if (num < 0xFD) {\n            return Buff.num(num, 1);\n        }\n        else if (num < 0x10000) {\n            return Buff.of(0xFD, ...Buff.num(num, 2, endian));\n        }\n        else if (num < 0x100000000) {\n            return Buff.of(0xFE, ...Buff.num(num, 4, endian));\n        }\n        else if (BigInt(num) < 0x10000000000000000n) {\n            return Buff.of(0xFF, ...Buff.num(num, 8, endian));\n        }\n        else {\n            throw new Error(`Value is too large: ${num}`);\n        }\n    }\n    static { this.encode = strToBytes; }\n    static { this.decode = bytesToStr; }\n    static random(size = 32) {\n        return new Buff(randomBytes(size), size);\n    }\n    static normalize(bytes, size) {\n        return new Buff(buffer(bytes, true), size);\n    }\n    static hexify(bytes) {\n        return hexify(bytes);\n    }\n    static serialize(data, size) {\n        return new Buff(serialize(data), size);\n    }\n    static revive(data) {\n        return revive(data);\n    }\n}\nclass Stream {\n    constructor(data) {\n        this.data = new Uint8Array(data);\n        this.size = this.data.length;\n    }\n    peek(size) {\n        if (size > this.size) {\n            throw new Error(`Size greater than stream: ${size} > ${this.size}`);\n        }\n        return new Buff(this.data.slice(0, size).buffer);\n    }\n    read(size) {\n        size = size ?? this.readSize();\n        const chunk = this.peek(size);\n        this.data = this.data.slice(size);\n        this.size = this.data.length;\n        return chunk;\n    }\n    readSize(endian) {\n        const num = this.read(1).num;\n        switch (true) {\n            case (num >= 0 && num < 0xFD):\n                return num;\n            case (num === 0xFD):\n                return this.read(2).toNum(endian);\n            case (num === 0xFE):\n                return this.read(4).toNum(endian);\n            case (num === 0xFF):\n                return this.read(8).toNum(endian);\n            default:\n                throw new Error(`Varint is out of range: ${num}`);\n        }\n    }\n}\n\nconst is = {\n    null: x => x === null,\n    undefined: x => typeof x === 'undefined',\n    hex: x => isHex(x),\n    string: x => typeof x === 'string',\n    infinity: x => x === Infinity,\n    bigint: x => typeof x === 'bigint',\n    number: x => typeof x === 'number',\n    class: x => (typeof x?.prototype === 'object' &&\n        x.toString().startsWith('class')),\n    function: x => typeof x === 'function',\n    uint8: x => x instanceof Uint8Array,\n    uint16: x => x instanceof Uint16Array,\n    uint32: x => x instanceof Uint32Array,\n    buffer: x => x instanceof ArrayBuffer,\n    array: x => Array.isArray(x),\n    object: x => typeof x === 'object'\n};\nconst array = {\n    isString: x => x.every((e) => is.string(e)),\n    isNumber: x => x.every((e) => is.number(e)),\n    isBigint: x => x.every((e) => is.bigint(e))\n};\nconst type = (x) => {\n    for (const [k, v] of Object.entries(is)) {\n        if (v(x) === true) {\n            return k;\n        }\n    }\n    return 'unknown';\n};\nfunction isHex(str) {\n    switch (true) {\n        case (typeof str !== 'string'):\n            return false;\n        case (str.length % 2 !== 0):\n            return false;\n        case (/[^0-9a-fA-F]/.test(str)):\n            return false;\n        default:\n            return true;\n    }\n}\nconst Check = {\n    type,\n    array,\n    is\n};\n\nexport { B64URL, Base58, Base58C, Base64, BaseX, Bech32, Buff, Check, Hash, Hex, Stream, Txt, addChecksum, b64decode, checkTheSum, hash160, hash256, hmac256, hmac512, ripe160, sha256, sha512 };\n//# sourceMappingURL=module.mjs.map\n",null,null,null,null,null],"names":["number","n","Number","isSafeInteger","Error","bytes","b","lengths","Uint8Array","TypeError","length","includes","assert","bool","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","assert$3","crypto","globalThis","undefined","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","Uint32Array","toBytes","data","str","TextEncoder","encode","utf8ToBytes","Array","from","v","i","toString","padStart","Hash$2","clone","this","_cloneInto","wrapConstructor","hashConstructor","hashC","message","update","digest","tmp","randomBytes","bytesLength","getRandomValues","Hash","constructor","padOffset","isLE","super","pos","view","len","take","Math","set","subarray","process","dataView","roundClean","digestInto","fill","value","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","res","slice","destroy","to","Maj","a","c","SHA256_K","IV","SHA256_W","SHA2","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","s1","T1","T2","SHA256","sha256","SHA224","_0n","_1n","_2n","u8a","hexes","bytesToHex","hex","numberToHexUnpadded","num","hexToNumber","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","e","concatBytes","arrs","r","reduce","sum","pad","forEach","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","reseed","seed","gen","sl","push","pred","validatorFns","bigint","val","function","boolean","string","isArray","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","Object","entries","b1","b2","_3n","_4n","_5n","_8n","mod","result","pow","power","modulo","pow2","x","invert","u","m","FpSqrt","P","p1div4","root","eql","sqr","c1","n2","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","validateField","map","ORDER","MASK","BYTES","BITS","nLength","nBitLength","_nBitLength","nByteLength","ceil","validateBasic","curve","Gx","Gy","freeze","p","b2n","h2b","ut","DER","Err","_parseInt","d","toSig","sBytes","s","rBytesLeft","hexFromSig","sig","shl","rhl","rl","weierstrassPoints","opts","CURVE","ut.validateObject","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","endo","beta","splitScalar","validatePointOpts","point","isCompressed","toAffine","ut.concatBytes","y","tail","weierstrassEquation","x2","x3","add","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","key","ut.bytesToHex","ut.bytesToNumberBE","error","mod.mod","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","static","is0","points","toInv","invertBatch","fromAffine","assertValidity","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","delete","left","right","hasEvenY","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f","f1p","f2p","constTimeNegate","normalizeZ","multiplyAndAddUnsafe","iz","z","inv","ax","ay","zz","cofactor","toRawBytes","toHex","_bits","bits","condition","item","W","windows","elm","precomputeWindow","base","window","precomputes","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","ProjectivePoint","weierstrass","curveDef","hmac","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","mod.invert","cat","head","y2","sqrt","numToNByteStr","ut.numberToBytesBE","isBiggerThanHalfOrder","slcNum","Signature","recovery","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","fromHex","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","ut.hexToBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","groupOrder","minLen","mod.hashToPrivateScalar","precompute","isProbPub","delta","ORDER_MASK","ut.bitMask","int2octets","prepSig","defaultSigOpts","some","prehash","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","q","normS","defaultVerOpts","getPublicKey","fromPrivateKey","getSharedSecret","privateA","publicB","sign","privKey","ut.createHmacDrbg","drbg","verify","signature","publicKey","sg","_sig","fromDER","derError","fromCompact","is","_key","iHash","oHash","buf","getPrototypeOf","HMAC","getHash","msgs","arrays","every","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","bitLen","redef","sqrtP","lhs","rhs","FpPow","div","sqrN","addN","subN","mulN","lst","nums","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","cmov","Field","secp256k1","defHash","createCurve","a1","a2","POW_2_128","c2","fe","TAGGED_HASH_PREFIXES","taggedHash","tag","messages","tagP","tagH","charCodeAt","pointToBytes","numTo32b","modP","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","args","schnorrVerify","pub","schnorr","auxRand","t","rand","k_","rx","isoMap","COEFF","xNum","xDen","yNum","yDen","htf.isogenyMap","mapSWU","mod.validateField","sqrtRatio","o","c3","c4","c5","c6","c7","tv1","tv2","tv3","tv5","tv4","isQR","tvv5","e1","y1","SWUFpSqrtRatio","tv6","mapToCurveSimpleSWU","mapToCurve","def","htf.createHasher","scalars","DST","encodeDST","expand","U32_MASK64","fromBig","le","u64$3","split","Ah","Al","toBig","shrSH","rotrSH","rotrSL","rotrBH","rotr32H","rotlSH","rotlSL","rotlBH","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","u64","SHA512_W_H","SHA512_W_L","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","shrSL","W2h","W2l","s1h","s1l","rotrBL","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512","sha512","SHA512_224","SHA512_256","SHA384","Rho","Id","_","Pi","idxL","idxR","shifts","shiftsL","idx","shiftsR","Kl","Kr","rotl","group","BUF","h0","h1","h2","h3","h4","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rr","sr","tl","tr","ripemd160","RIPEMD160","joinArray","size","prev","curr","buff","assert$1","Hash$1","sha256$1","u64$1","rotr32L","rotlBL","sha512$1","ec$2","dc","TextDecoder","strToBytes","match","numToBytes","of","bytesToBinary","bin","count","bigToBytes","big","bytesToStr","decode","chars","join","bytesToNum","bytesToBig","ArrayBuffer","hash256","msg","ripe160","hash160","hmac256","hmac512","ec$1","ALPHABETS","name","charset","getAlphabet","alpha","BaseX","padding","alphabet","repeat","encoded","replace","indexOf","Base58C","withSum","addChecksum","ret","chk","checkTheSum","CHARSET","GENERATOR","ENCODINGS","version","const","polymod","values","top","hrpExpand","hrp","convertBits","fromBits","toBits","maxVal","maxAcc","enc","combined","concat","createChecksum","charAt","bechstr","char","hasLower","hasUpper","checkBounds","lastIndexOf","checkSeparatorPos","toLowerCase","substring","find","verifyChecksum","b32decode","hrpgot","decoded","Bech32","BASE64_MAP","B64URL_MAP","ec","b64encode","input","urlSafe","b64decode","index","Base64","B64URL","Buff","endian","binary","ct","binaryToBytes","any","raw","json","JSON","stringify","base64","b64url","bech32","b58chk","toNum","toStr","toBin","tob58chk","toBase64","toB64url","toHash","id","stream","Stream","toHmac","toJson","parse","toBech32","prepend","append","start","end","begin","write","prefixSize","varInt","hexify","serialize","revive","peek","read","readSize","chunk","NoblePoint","secp","N","normalizeField","validate","normalize","generate","xpoint","hasOddY","negated","gt","lt","eq","ne","import","normalizePoint","__p","getXOnlyPub","seckey","xonly","pubkey","random","secret","DEFAULT_CONFIG","SecretKey","opt","options","config","PublicKey","xfilter","toWIF","KeyPair","r160","s256","s512"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}